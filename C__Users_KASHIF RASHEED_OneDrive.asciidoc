+*In[16]:*+
[source, ipython3]
----
import tensorflow as tf
tf.compat.v1.disable_eager_execution()
scalar1 = tf.constant(5)
scalar2 = tf.constant(6)
mul = scalar1 * scalar2
print(mul)
ssn = tf.compat.v1.Session()
ssn.run(mul)
----


+*Out[16]:*+
----
Tensor("mul_1:0", shape=(), dtype=int32)
30----


+*In[20]:*+
[source, ipython3]
----
vec1 = [1,2,3]
vec2 = [4,5,6]
dot_product = tf.tensordot(vec1, vec2, axes = 1)
ssn = tf.compat.v1.Session()
result = ssn.run(dot_product)
print("Dot Product:", result)
----


+*Out[20]:*+
----
Dot Product: 32
----


+*In[36]:*+
[source, ipython3]
----
import tensorflow as tf
tf.compat.v1.disable_eager_execution()
matrix1 = tf.constant([[1, 2],
                       [3, 4]])
matrix2 = tf.constant([[5, 6],
                       [7, 8]])
add = tf.add(matrix1, matrix2)
sub = tf.subtract(matrix1, matrix2)
mul = tf.multiply(matrix1, matrix2)
div = tf.divide(matrix1, matrix2)

with tf.compat.v1.Session() as sess:
    print("Addition:")
    print(sess.run(add))
    print("Subtraction:") 
    print(sess.run(sub))
    print("Multiplication:")
    print(sess.run(mul))
    print("Division:")
    print(sess.run(div))
----


+*Out[36]:*+
----
Addition:
[[ 6  8]
 [10 12]]
Subtraction:
[[-4 -4]
 [-4 -4]]
Multiplication:
[[ 5 12]
 [21 32]]
Division:
[[0.2        0.33333333]
 [0.42857143 0.5       ]]
----


+*In[38]:*+
[source, ipython3]
----
import tensorflow as tf                  # importing tensorflow
vector = tf.constant([1, 2, 3, 4, 5])    # creating a vector
scalar = tf.constant(10)                 # creating a scalar
matrix = tf.constant([[1, 2, 3],         # creating a matrix
                      [4, 5, 6],
                      [7, 8, 9]])
tensor = tf.constant([[[1, 2], [3, 4]],   # creating a tensor
                      [[5, 6], [7, 8]]])
print("Vector:")            #The code imports TensorFlow and creates a vector, scalar, matrix, and tensor      
print(vector)              #using TensorFlow constants.Then, it prints these created objects: vector,                          
print("Scalar:")           #scalar, matrix, and tensor.
print(scalar)
print("Matrix:")
print(matrix)
print("Tensor:")
print(tensor)
----


+*Out[38]:*+
----
Vector:
Tensor("Const_46:0", shape=(5,), dtype=int32)
Scalar:
Tensor("Const_47:0", shape=(), dtype=int32)
Matrix:
Tensor("Const_48:0", shape=(3, 3), dtype=int32)
Tensor:
Tensor("Const_49:0", shape=(2, 2, 2), dtype=int32)
----


+*In[48]:*+
[source, ipython3]
----
import tensorflow as tf
tensor = tf.constant([[[10, 20], [30, 40]],    # creating a tensor
                      [[50, 60], [70, 80]]])
# usnig the built-in methods of shape, rank, size  
tensor_shape = tf.shape(tensor)
tensor_rank = tf.rank(tensor)
tensor_size = tf.size(tensor)
# using method Start a TensorFlow session
with tf.compat.v1.Session() as sess: 
    # Run the session to evaluate the shape, rank, and size
    shape, rank, size = sess.run([tensor_shape, tensor_rank, tensor_size])
    print("Tensor:")
    print("Shape:", shape)
    print("Rank:", rank)
    print("Size:", size)
    
    #The code utilizes TensorFlow to create 
    #a tensor and then employs built-in methods 
    #to determine its shape, rank, and size. 
    #Finally,it runs a TensorFlow session 
    #to evaluate these properties and prints 
    #the results.
----


+*Out[48]:*+
----
Tensor:
Shape: [2 2 2]
Rank: 3
Size: 8
----


+*In[72]:*+
[source, ipython3]
----
import tensorflow as tf
shape = [5, 300]   # Define the shape of the tensors
# Create two tensors containing random values between 0 and 1
tensor1 = tf.random.uniform(shape, minval=0, maxval=1)
tensor2 = tf.random.uniform(shape, minval=0, maxval=1)
print("Tensor 1:")
print(tensor1)
print("\nTensor 2:")
print(tensor2)
#This code segment utilizes TensorFlow to generate two tensors 
#with random values between 0 and 1, each with a shape of [5, 300].
#It then prints both tensors to display their contents.
----


+*Out[72]:*+
----
Tensor 1:
Tensor("random_uniform_33/RandomUniform:0", shape=(5, 300), dtype=float32)

Tensor 2:
Tensor("random_uniform_34/RandomUniform:0", shape=(5, 300), dtype=float32)
----


+*In[60]:*+
[source, ipython3]
----
import tensorflow as tf
# 1 Create two tensors with random values between 0 and 1 and shape [5, 300]
shape = [5, 300]
tensor1 = tf.random.uniform(shape, minval=0, maxval=1)
tensor2 = tf.random.uniform(shape, minval=0, maxval=1)
# 2 Perform dot product
result = tf.matmul(tensor1, tf.transpose(tensor2))
with tf.compat.v1.Session() as sess:
     # 3 Run the session to evaluate the dot product
    result_value = sess.run(result)
    print("Matrix Multiplication Result:")
    print(result_value)
    
#This code snippet first creates two tensors with random
#values between 0 and 1 and shape [5, 300]. Then, it performs
#a dot product operation between the two tensors using
#`tf.matmul` and `tf.transpose`. Finally, it runs a TensorFlow
#session to evaluate the dot product and prints the result.
----


+*Out[60]:*+
----
Matrix Multiplication Result:
[[72.858025 71.1398   72.274185 72.28816  72.57492 ]
 [67.89171  66.60488  66.72388  67.5742   71.35395 ]
 [78.22241  73.928024 72.80868  71.93576  77.21457 ]
 [76.9552   73.41264  73.43242  75.96318  80.40804 ]
 [77.883064 73.25427  77.53422  74.11803  75.65284 ]]
----


+*In[63]:*+
[source, ipython3]
----
import tensorflow as tf
shape = [5, 300]
tensor1 = tf.random.uniform(shape, minval=0, maxval=1)
tensor2 = tf.random.uniform(shape, minval=0, maxval=1)
tensor2_transposed = tf.transpose(tensor2)
# 2 Perform matrix multiplication
dot_product = tf.tensordot(tensor1, tensor2_transposed, axes=1)
with tf.compat.v1.Session() as sess:
    dot_product_value = sess.run(dot_product)
    print("Dot Product Result:")
    print(dot_product_value)
#The code generates two tensors with random values of shape [5, 300],
#transposes the second tensor, and computes their dot product using 
#`tf.tensordot` with axes set to 1. The resulting dot product is then printed.
----


+*Out[63]:*+
----
Dot Product Result:
[[70.122665 74.5905   75.13792  69.29355  72.03497 ]
 [76.10588  78.317795 78.87579  76.26964  82.45479 ]
 [71.00073  72.879486 73.76866  70.3047   74.565475]
 [74.8371   74.319046 78.77347  75.1992   78.16991 ]
 [80.23851  81.460846 79.06264  80.65097  82.23241 ]]
----


+*In[64]:*+
[source, ipython3]
----
import tensorflow as tf
shape = [224, 224, 3]  #1  Define the shape of the tensor
# 2 Create a tensor containing random values between 0 and 1
random_tensor = tf.random.uniform(shape, minval=0, maxval=1)
print("Random Tensor:")
print(random_tensor)
#This code snippet creates a tensor with a shape of [224, 224, 3]
#containing random values between 0 and 1 using TensorFlow's
#`tf.random.uniform` function. The resulting random tensor is then printed.
----


+*Out[64]:*+
----
Random Tensor:
Tensor("random_uniform_30/RandomUniform:0", shape=(224, 224, 3), dtype=float32)
----


+*In[65]:*+
[source, ipython3]
----
import tensorflow as tf
# Define the shape of the tensor
shape = [224, 224, 3]
# Create a tensor containing random values between 0 and 1
random_tensor = tf.random.uniform(shape, minval=0, maxval=1)
# Calculate the minimum and maximum values
min_value = tf.reduce_min(random_tensor)
max_value = tf.reduce_max(random_tensor)
with tf.compat.v1.Session() as sess:
    # Run the session to evaluate the min and max values
    min_val, max_val = sess.run([min_value, max_value])
    print("Minimum Value:", min_val)
    print("Maximum Value:", max_val)
#This code segment generates a tensor with a shape of [224, 224, 3],
#containing random values between 0 and 1 using TensorFlow's `tf.random.uniform` 
#function. It then calculates the minimum and maximum values within the tensor using
#`tf.reduce_min` and `tf.reduce_max`, respectively. Finally, it runs a TensorFlow 
#session to evaluate and print the minimum and maximum values.
----


+*Out[65]:*+
----
Minimum Value: 1.3113022e-06
Maximum Value: 0.99999845
----


+*In[66]:*+
[source, ipython3]
----
import tensorflow as tf
shape = [1, 224, 224, 3]
random_tensor = tf.random.uniform(shape, minval=0, maxval=1)
# Squeeze the tensor to change the shape to [224, 224, 3]
squeezed_tensor = tf.squeeze(random_tensor)
with tf.compat.v1.Session() as sess:
    # Run the session to evaluate the squeezed tensor
    squeezed_tensor_value = sess.run(squeezed_tensor)
    print("Shape of Squeezed Tensor:", squeezed_tensor_value.shape)
    print("Squeezed Tensor:")
    print(squeezed_tensor_value)
#This code generates a tensor with a shape of [1, 224, 224, 3] 
#containing random values between 0 and 1 using `tf.random.uniform`. 
#It then squeezes the tensor to change its shape to [224, 224, 3]
#using `tf.squeeze`. Finally, it runs a TensorFlow session to evaluate 
#and print the shape and values of the squeezed tensor.
----


+*Out[66]:*+
----
Shape of Squeezed Tensor: (224, 224, 3)
Squeezed Tensor:
[[[0.05477273 0.10475445 0.2872969 ]
  [0.18302345 0.3389802  0.3587066 ]
  [0.2105205  0.2932614  0.8874295 ]
  ...
  [0.96145487 0.933519   0.11919391]
  [0.6189251  0.05440438 0.30143785]
  [0.17399573 0.6912515  0.647843  ]]

 [[0.19994581 0.4170884  0.10476315]
  [0.9880272  0.41066575 0.06006277]
  [0.45768046 0.85213697 0.9654125 ]
  ...
  [0.8774253  0.9725393  0.29383707]
  [0.68735707 0.24215746 0.7608478 ]
  [0.36467505 0.53144634 0.7791985 ]]

 [[0.6307756  0.6013355  0.4604925 ]
  [0.544099   0.03406608 0.5167655 ]
  [0.60260034 0.86035585 0.5063759 ]
  ...
  [0.46127498 0.5041326  0.4830432 ]
  [0.12412775 0.44279444 0.01853597]
  [0.1562432  0.06165242 0.49828744]]

 ...

 [[0.13911939 0.1111623  0.06021845]
  [0.7430351  0.9825183  0.78396523]
  [0.05457115 0.9505688  0.08173442]
  ...
  [0.00245643 0.15202975 0.34472573]
  [0.7976482  0.85420024 0.8079809 ]
  [0.30812263 0.8264185  0.51634216]]

 [[0.2659204  0.933424   0.93760455]
  [0.5062957  0.0091089  0.5830132 ]
  [0.42936265 0.2194953  0.9222082 ]
  ...
  [0.9973763  0.7219094  0.2632028 ]
  [0.45414495 0.2910304  0.72760844]
  [0.75843596 0.06807733 0.89175725]]

 [[0.67710006 0.96144414 0.7104746 ]
  [0.4850223  0.14058113 0.11156511]
  [0.1884023  0.5991144  0.31922936]
  ...
  [0.3406936  0.83375764 0.28063858]
  [0.5594568  0.44089174 0.14551282]
  [0.61818707 0.24836075 0.06594372]]]
----


+*In[71]:*+
[source, ipython3]
----
import tensorflow as tf
#values for the tensor
values = [5, 8, 12, 7, 3, 9, 15, 6, 11, 10]
# Create a tensor with shape [10] using the defined values
tensor = tf.constant(values)
# Find the index of the maximum value in the tensor
max_index = tf.argmax(tensor)
max_value = tf.reduce_max(tensor)
# Start a TensorFlow session
with tf.compat.v1.Session() as sess:
    # Run the session to evaluate the index of the maximum value
    max_index_value, max_value_value = sess.run([max_index, max_value])
    print("Index of Maximum Value:", max_index_value)
    print("Maximum Value:", max_value_value)
#This code creates a tensor with shape [10] using the defined values
#and finds the index of the maximum value in the tensor using `tf.argmax`.
#Additionally, it calculates the maximum value using `tf.reduce_max`.
#Finally, it runs a TensorFlow session to evaluate and print the index 
#of the maximum value and the maximum value itself.
----


+*Out[71]:*+
----
Index of Maximum Value: 6
Maximum Value: 15
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
